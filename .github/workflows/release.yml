name: Release Artifacts

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: sudo apt-get install -y jq curl

      - name: Get latest build workflow artifact
        id: latest_artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_ARTIFACT_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/build.yml/artifacts" \
            | jq -r '.artifacts[0].archive_download_url')
          echo "LATEST_ARTIFACT_URL=$LATEST_ARTIFACT_URL" >> $GITHUB_ENV

      - name: Download artifact
        run: |
          curl -L -o JforexRestful.zip -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ env.LATEST_ARTIFACT_URL }}
          unzip JforexRestful.zip -d downloaded-artifacts

      - name: Get current release version
        id: current_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_RELEASE_TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" \
            | jq -r '.tag_name')
          echo "CURRENT_RELEASE_TAG=$CURRENT_RELEASE_TAG" >> $GITHUB_ENV

      - name: Increment release version
        id: new_version
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          if [[ -n "$INPUT_VERSION" ]] && [[ "$INPUT_VERSION" > "$CURRENT_RELEASE_TAG" ]]; then
            NEW_RELEASE_TAG="$INPUT_VERSION"
          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_RELEASE_TAG"
            VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
            NEW_RELEASE_TAG="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          fi
          echo "NEW_RELEASE_TAG=$NEW_RELEASE_TAG" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_RELEASE_TAG }}
          release_name: Release ${{ env.NEW_RELEASE_TAG }}
          draft: false
          prerelease: false

      - name: Upload JAR as a Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded-artifacts/JforexRestful.jar
          asset_name: JforexRestful.jar
          asset_content_type: application/java-archive
